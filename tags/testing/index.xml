<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on Cupper</title>
    <link>https://www.deepaksurti.com/tags/testing/</link>
    <description>Recent content in testing on Cupper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jun 2005 12:47:02 -0700</lastBuildDate><atom:link href="https://www.deepaksurti.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Review and clean up</title>
      <link>https://www.deepaksurti.com/series/expense-calc/06/</link>
      <pubDate>Mon, 13 Jun 2005 12:47:02 -0700</pubDate>
      
      <guid>https://www.deepaksurti.com/series/expense-calc/06/</guid>
      <description>Till session 5, we implemented all 6 requirements. Time to take a look at the code keeping in mind the observations of the last session.
First up I add more test coverage for other scenarios. Everything works fine.
But i had pointed out about making parellel class heirarchies of expense sheet and expense statement. I try doing it but when i realize the Factory Method signatures would be different I revert back to old desing.</description>
    </item>
    
    <item>
      <title>Generating expense statement for a payer</title>
      <link>https://www.deepaksurti.com/series/expense-calc/05/</link>
      <pubDate>Sat, 11 Jun 2005 12:47:02 -0700</pubDate>
      
      <guid>https://www.deepaksurti.com/series/expense-calc/05/</guid>
      <description>Now having implemented 4 requirements I come on to the next one:
Requirement 5: Generate an expense statement for a payer for a date range.
Say for bhavdeep for 1 Apr to 30 Apr 2005 genrate an expense statement should look like this:
Bhavdeep 1 Apr 2005 to 30 Apr 2005
 Bhavdeep receive from Surender 13 USD Bhavdeep receive from Deepak 5 USD 2 Apr 2005 Albertsons Deepak 12 USD 7 Apr 2005CostCo Surender 5 USD 16 Apr 2005 Burger King Deepak -7USD 28 Apr 2005 Panda Express Surender 8 USD  Thus we see a header with name, date range for statement, summary, and details.</description>
    </item>
    
    <item>
      <title>Generating expense statements</title>
      <link>https://www.deepaksurti.com/series/expense-calc/04/</link>
      <pubDate>Mon, 06 Jun 2005 12:47:02 -0700</pubDate>
      
      <guid>https://www.deepaksurti.com/series/expense-calc/04/</guid>
      <description>In session 1, we implemented requirements 1 and 2. And sessions 2, 3 we spent time simplifying the design. At this stage we are now good enough to move on to implementing the next requirement.
Requirement 3: Generate an expense sheet for a payer for a list of transactions for a date range.
Steps: Wriet junit test case. While writing the test case I realize I have not added a date to transactoins.</description>
    </item>
    
    <item>
      <title>Simplifying transactions and expenses</title>
      <link>https://www.deepaksurti.com/series/expense-calc/03/</link>
      <pubDate>Sun, 05 Jun 2005 12:47:02 -0700</pubDate>
      
      <guid>https://www.deepaksurti.com/series/expense-calc/03/</guid>
      <description>The tools I am using are:
 Intellij Idea 4.5.3 CVS for source control *its a local repository on my laptop Argo UML for class diagrams. I just used visual paradigm for session 1 but argo is what i m more comfortable with.  Till now the implementation looks good enough and more importantly simple. Now when I look at the expense sheet generated for the transaction it looks somehting like this for req 1: (see session 1)</description>
    </item>
    
    <item>
      <title>Simplifying Party Hierarchy</title>
      <link>https://www.deepaksurti.com/series/expense-calc/02/</link>
      <pubDate>Sat, 04 Jun 2005 12:47:02 -0700</pubDate>
      
      <guid>https://www.deepaksurti.com/series/expense-calc/02/</guid>
      <description>Simplifying Party heirarchy</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://www.deepaksurti.com/series/expense-calc/01/</link>
      <pubDate>Sat, 04 Jun 2005 12:40:02 -0700</pubDate>
      
      <guid>https://www.deepaksurti.com/series/expense-calc/01/</guid>
      <description>Setup, implementing 2 basic features</description>
    </item>
    
    <item>
      <title>Expense Calculator</title>
      <link>https://www.deepaksurti.com/series/expense-calc/</link>
      <pubDate>Wed, 01 Jun 2005 12:47:02 -0700</pubDate>
      
      <guid>https://www.deepaksurti.com/series/expense-calc/</guid>
      <description>Learning refactoring and automated testing.</description>
    </item>
    
    <item>
      <title>Automated Tests</title>
      <link>https://www.deepaksurti.com/automated-tests/</link>
      <pubDate>Sat, 26 Mar 2005 12:47:02 -0700</pubDate>
      
      <guid>https://www.deepaksurti.com/automated-tests/</guid>
      <description>I was asked to write this utility to convert a graph of objects of type &amp;lsquo;X&amp;rsquo; into type &amp;lsquo;Y&amp;rsquo;. The difference between X and Y is that X objects sit in a layer whereas Y travel all over the network.
I was already handed out some partly written code. I was happy because I am training myself to be an agile practitioner and reading, working on someone else&amp;rsquo;s code should be easy for me.</description>
    </item>
    
  </channel>
</rss>
